generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Citoyen {
  id            String    @id @default(uuid()) @map("id_citoyen")
  nom           String
  prenom        String
  dateNaissance DateTime  @map("date_naissance")
  lieuNaissance String    @map("lieu_naissance")
  adresse       String
  email         String    @unique
  telephone     String
  password      String
  demandes      Demande[]
}

model Demande {
  id          String    @id @default(uuid()) @map("id_demande")
  citoyenId   String    @map("id_citoyen")
  typeActe    TypeActe  @map("type_acte")
  statut      StatutDemande
  dateDemande DateTime  @map("date_demande")
  paiementId  String?   @map("id_paiement")
  citoyen     Citoyen   @relation(fields: [citoyenId], references: [id])
  paiement    Paiement? @relation(fields: [paiementId], references: [id])
  acte        Acte?
  historiques HistoriqueModification[] @relation("DemandeHistoriques")
}

model Acte {
  id                 String    @id @default(uuid()) @map("id_acte")
  demandeId          String    @unique @map("id_demande")
  dateDelivrance     DateTime  @map("date_delivrance")
  fichierPdf         String    @map("fichier_pdf")
  signatureNumerique String    @map("signature_numerique")
  estArchive         Boolean   @default(false) @map("est_archive")
  dateArchivage      DateTime? @map("date_archivage")
  demande            Demande   @relation(fields: [demandeId], references: [id])
  agentId            String?   @map("id_agent")
  agent              Agent?    @relation(fields: [agentId], references: [id])
  historiques        HistoriqueModification[] @relation("ActeHistoriques")
}

model Paiement {
  id            String    @id @default(uuid()) @map("id_paiement")
  montant       Float
  modePaiement  ModePaiement @map("mode_paiement")
  datePaiement  DateTime  @map("date_paiement")
  transactionId String    @map("transaction_id")
  demandes      Demande[]
}

model Agent {
  id        String    @id @default(uuid()) @map("id_agent")
  nom       String
  prenom    String
  email     String    @unique
  role      RoleAgent
  password  String
  actes     Acte[]
  historiques HistoriqueModification[]
}

model HistoriqueModification {
  id                String    @id @default(uuid()) @map("id_historique")
  typeEntite        TypeEntite @map("type_entite")
  entiteId          String     @map("id_entite")
  agentId           String     @map("id_agent")
  action            String
  dateModification  DateTime   @map("date_modification")
  ancienneValeur    String     @map("ancienne_valeur")
  nouvelleValeur    String     @map("nouvelle_valeur")
  agent             Agent      @relation(fields: [agentId], references: [id])

  // Relations inverses pour Demande et Acte
  demandeId         String?    @map("id_demande")
  demande           Demande?   @relation("DemandeHistoriques", fields: [demandeId], references: [id])
  acteId            String?    @map("id_acte")
  acte              Acte?      @relation("ActeHistoriques", fields: [acteId], references: [id])
}

enum TypeActe {
  Naissance
  Mariage
  Décès
}

enum StatutDemande {
  Soumise
  En_traitement
  Validée
  Refusée
  Livrée
}

enum ModePaiement {
  Mobile_Money
  Carte_Bancaire
  Virement
}

enum RoleAgent {
  Agent
  Administrateur
}

enum TypeEntite {
  Demande
  Acte
}
