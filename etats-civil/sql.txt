// drizzle/schema.ts
import { pgTable, uuid, varchar, text, date, timestamp, decimal, boolean, pgEnum } from "drizzle-orm/pg-core";

// Enums
export const typeActeEnum = pgEnum('type_acte', ['Naissance', 'Mariage', 'Décès']);
export const statutDemandeEnum = pgEnum('statut_demande', ['Soumise', 'En traitement', 'Validée', 'Refusée', 'Livrée']);
export const modePaiementEnum = pgEnum('mode_paiement', ['Mobile_Money', 'Carte_Bancaire', 'Virement']);
export const roleEnum = pgEnum('role', ['Agent', 'Administrateur']);
export const typeEntiteEnum = pgEnum('type_entite', ['Demande', 'Acte']);

// Citoyen
export const citoyen = pgTable('citoyen', {
  id: uuid('id').primaryKey(),
  nom: varchar('nom', { length: 100 }),
  prenom: varchar('prenom', { length: 100 }),
  dateNaissance: date('date_naissance'),
  lieuNaissance: varchar('lieu_naissance', { length: 150 }),
  adresse: text('adresse'),
  email: varchar('email', { length: 150 }),
  telephone: varchar('telephone', { length: 20 }),
});

// Agent
export const agent = pgTable('agent', {
  id: uuid('id').primaryKey(),
  nom: varchar('nom', { length: 100 }),
  prenom: varchar('prenom', { length: 100 }),
  email: varchar('email', { length: 150 }),
  role: roleEnum('role'),
});

// Paiement
export const paiement = pgTable('paiement', {
  id: uuid('id').primaryKey(),
  montant: decimal('montant', { precision: 10, scale: 2 }),
  mode: modePaiementEnum('mode'),
  datePaiement: timestamp('date_paiement', { withTimezone: true }),
  transactionId: varchar('transaction_id', { length: 150 }),
});

// Demande
export const demande = pgTable('demande', {
  id: uuid('id').primaryKey(),
  citoyenId: uuid('citoyen_id').references(() => citoyen.id),
  typeActe: typeActeEnum('type_acte'),
  statut: statutDemandeEnum('statut'),
  dateDemande: timestamp('date_demande', { withTimezone: true }),
  paiementId: uuid('paiement_id').references(() => paiement.id),
});

// Acte
export const acte = pgTable('acte', {
  id: uuid('id').primaryKey(),
  demandeId: uuid('demande_id').references(() => demande.id),
  dateDelivrance: timestamp('date_delivrance', { withTimezone: true }),
  fichierPdf: text('fichier_pdf'),
  signatureNumerique: text('signature_numerique'),
  dateArchivage: timestamp('date_archivage', { withTimezone: true }).default(null),
});

// Historique_Modifications
export const historiqueModifications = pgTable('historique_modifications', {
  id: uuid('id').primaryKey(),
  typeEntite: typeEntiteEnum('type_entite'),
  entiteId: uuid('entite_id'),
  agentId: uuid('agent_id').references(() => agent.id),
  action: text('action'),
  dateModification: timestamp('date_modification', { withTimezone: true }),
  ancienneValeur: text('ancienne_valeur'),
  nouvelleValeur: text('nouvelle_valeur'),
});
