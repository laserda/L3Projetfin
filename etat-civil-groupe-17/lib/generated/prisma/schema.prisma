// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TypeActe {
  Naissance
  Mariage
  Décès
}

enum StatutDemande {
  Soumise
  En_traitement
  Validée
  Refusée
  Livrée
}

enum ModePaiement {
  Mobile_Money
  Carte_Bancaire
  Virement
}

enum RoleAgent {
  Agent
  Administrateur
}

enum TypeEntite {
  Demande
  Acte
}

model Citoyen {
  ID_Citoyen    String   @id @default(uuid())
  Nom           String
  Prenom        String
  DateNaissance DateTime
  LieuNaissance String
  Adresse       String
  Email         String   @unique
  Telephone     String
  Password      String

  Demandes Demande[]
}

model Demande {
  ID_Demande   String        @id @default(uuid())
  ID_Citoyen   String
  Type_Acte    TypeActe
  Statut       StatutDemande
  Date_Demande DateTime
  ID_Paiement  String        @unique

  citoyen    Citoyen                    @relation(fields: [ID_Citoyen], references: [ID_Citoyen])
  paiement   Paiement                   @relation(fields: [ID_Paiement], references: [ID_Paiement])
  document   Document_Acte?
  historique Historique_Modifications[]

  @@index([ID_Citoyen])
  @@index([ID_Paiement])
}

model Document_Acte {
  ID_Document_Acte    String   @id @default(uuid())
  ID_Demande          String   @unique
  ID_Agent            String
  Date_Delivrance     DateTime
  Fichier_PDF         String // lien vers un fichier, ne pas stocker le PDF
  Signature_Numerique String
  Est_Archive         Boolean
  Date_Archivage      DateTime

  demande    Demande                    @relation(fields: [ID_Demande], references: [ID_Demande])
  agent      Agent                      @relation(fields: [ID_Agent], references: [ID_Agent])
  historique Historique_Modifications[]

  @@index([ID_Demande])
  @@index([ID_Agent])
}

model Paiement {
  ID_Paiement    String       @id @default(uuid())
  Montant        Decimal
  Mode_Paiement  ModePaiement
  Date_Paiement  DateTime
  Transaction_ID String       @unique

  demande Demande?
}

model Agent {
  ID_Agent    String                     @id @default(uuid())
  Nom         String
  Prenom      String
  Email       String                     @unique
  Role        RoleAgent
  Password    String
  documents   Document_Acte[]
  historiques Historique_Modifications[]
}

model Historique_Modifications {
  ID_Historique     String     @id @default(uuid())
  Type_Entite       TypeEntite
  ID_Entite         String
  ID_Agent          String
  Action            String
  Date_Modification DateTime
  Ancienne_Valeur   String
  Nouvelle_Valeur   String

  agent    Agent          @relation(fields: [ID_Agent], references: [ID_Agent])
  demande  Demande?       @relation(fields: [ID_Entite], references: [ID_Demande], map: "fk_demande")
  document Document_Acte? @relation(fields: [ID_Entite], references: [ID_Document_Acte], map: "fk_acte")

  @@index([ID_Agent])
  @@index([ID_Entite])
}
